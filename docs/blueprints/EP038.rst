:EP: 38
:Title: Improving security to coloring application to switches
:Authors:
    - Aldo Ortega <aortegay AT fiu DOT edu>
    - Italo Valcy <idasilva AT fiu DOT edu>

:Created: 2023-06-27
:Updated: 2023-07-02
:Kytos-Version: 2023.2
:Status: Draft

*************************************************************
EP38 - Improving security to coloring application to switches
*************************************************************

Abstract
========

Here it will be explained the vulnerability of **coloring** implementation related ot its broad match field. Also, it is going to be explained how these vulnerabilities could be solved.

Motivation
==========

The NApp **coloring** installs flows according to a switch neighbors (switches connected by a link). These flows have three crucial characteristics:

  1. The matching criteria has one field, **"dl_src"** which has the same standard as a **MAC** address; ie. **ee:ee:ee:ee:ee:02**.
  2. The received packet is send to the controller.
  3. These flows have the highest priority.

**coloring** flows are meant to only accept packets from NNIs previously discovered NNI but having only one match field **dl_src** does not assure it. Any connected interface with a matched **MAC** address can dangerously send loads of packets that could cause:

  - Overload to the switch
  - Overload to the controller
  - Interruption to other flows of the affected switch

Solution
========

We need to ensure that the packets that **coloring** is interested in, come from an NNI and drop anything else. Adding the following should suffice:

  - Adding **"in_port"** as matching criteria to the created flow. **coloring** recognizes only discovered NNIs. Their ports can be utilize to specify the matching.
  - Add an extra flow without **"in_port"** so it matches what is left. The matched packets need to be dropped to avoid further inturreptions with other flows.

Diagram on how the solution would look like:

  .. code:: console

                                                   +------------------------+ 
                                                   |        Switch 1        | 
                             Port 0         Port 0 |       (in_port=3       |  Port 3          Port 2  +-------------------------+ 
    +---------------------+   /|     attack    |\  |dl_src=ee:ee:ee:ee:ee:02|   /|      NNI       |\   |         Switch 2        |
    |  Unknown component  |  / |---------------| \ |  actions=CONTROLLER)   |  / |----------------| \  |        (in_port=2       |
    |MAC=ee:ee:ee:ee:ee:02|  \ |---------------| / |                        |  \ |----------------| /  | dl_src=ee:ee:ee:ee:ee:01|
    +---------------------+   \|    packets->  |/  |           (            |   \|                |/   |   actions=CONTROLLER)   |
                                                   |dl_src=ee:ee:ee:ee:ee:02|                          +-------------------------+
                                                   |      actions=drop)     |
                                                   +------------------------+

Priority
~~~~~~~~

This solution is not going to stop loads of packets comming from not NNIs but just manage them. In order to not drop a necessary packet and free the rest of the flows from these attacks, the priorities need to be adjusted.

- Leave the priority **50 000** for the **coloring** flow entries with **"in_port"** match in them
- The flow entries that drop packet should have a higher priority than **mef_eline** entries (max. **20 000**) and lower than **of_lldp** entries (currently as of writting **1 000**)

Final result for switch 1 with an intra-switch EVC:

  .. code:: console

    cookie=0xac, table=0, send_flow_rem priority=50000,in_port="s1-eth3",dl_src=ee:ee:ee:ee:ee:02 actions=CONTROLLER:65535
    cookie=0xab, table=0, send_flow_rem priority=40000,dl_vlan=3799,dl_type=0x88cc actions=CONTROLLER:65535
    cookie=0xac, table=0, send_flow_rem priority=30000,dl_src=ee:ee:ee:ee:ee:02 actions=drop
    cookie=0xaa, table=0, send_flow_rem priority=20000,in_port="s1-eth1",dl_vlan=100 actions=set_field:4196->vlan_vid,output:"s1-eth2"
    cookie=0xaa, table=0, send_flow_rem priority=20000,in_port="s1-eth2",dl_vlan=100 actions=set_field:4196->vlan_vid,output:"s1-eth1"
