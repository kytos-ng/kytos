:EP: 38
:Title: Improving security to coloring application to switches
:Authors:
    - Aldo Ortega <aortegay AT fiu DOT edu>
    - Italo Valcy <idasilva AT fiu DOT edu>

:Created: 2023-06-27
:Updated: 2023-07-20
:Kytos-Version: 2023.2
:Status: Draft

*************************************************************
EP38 - Improving security to coloring application to switches
*************************************************************

Abstract
========

Here it will be explained the vulnerability of **coloring** implementation related ot its broad match field. Also, it is going to be explained how these vulnerabilities could be solved.

Motivation
==========

The NApp **coloring** installs flows according to a switch neighbors (NNI linked switches). These flows have three crucial characteristics:

  1. The matching criteria has one field, **"dl_src"** which has the same standard as a **MAC** address; ie. **ee:ee:ee:ee:ee:02**.
  2. The received packet is send to the controller.
  3. These flows have the highest priority.

Current implementation of **coloring** flows

  .. image:: https://drive.google.com/uc?export=view&id=1G014OIYfxCuEYs_OEztaL9W9Rv80ZSWq

**coloring** flows are meant to only accept packets from previously discovered NNIs but having only one match field **dl_src** does not assure it. Any connected interface with a matched **MAC** address can dangerously send loads of packets that could cause:

  - Overload to the switch
  - Overload to the controller
  - Interruption to other flows of the affected switch

Solution
========

We need to ensure that the packets that **coloring** is interested in, come from a discovered NNI and drop anything else. Adding the following should suffice:

  - Adding **"in_port"** as matching criteria to the created flow. **coloring** recognizes only discovered NNIs. Their ports can be utilize to specify the matching so there is going to be one flow per NNI port. Examples flows 1 and 2.
  - Add an extra flow to drop the unwanted traffic. It will match any packet with MAC prefix used by coloring. It can be done using mask. Example flow 3.

Diagram on how the solution would look like:

  .. image:: https://drive.google.com/uc?export=view&id=1Wmlr-u4Tgw4YWNe46M2CZcRvXk_MCnlZ

Priority
--------

This solution is not going to stop loads of packets comming from not NNIs but just manage them. In order to free the rest of flows, some priorities need to be adjusted:

- Leave the priority **50 000** for the **coloring** flow entries with **"in_port"** match in them
- The flow entries that drop packet should have a higher priority than **mef_eline** entries (max. **20 000**) and lower or equal than **of_lldp** entries (currently as of writting **50 000**)

Final result for switch 1 with an intra-switch EVC could look like:

  .. code:: console

    cookie=0xac, table=0, send_flow_rem priority=50000,in_port="s1-eth3",dl_src=ee:ee:ee:ee:ee:02 actions=CONTROLLER:65535
    cookie=0xab, table=0, send_flow_rem priority=50000,dl_vlan=3799,dl_type=0x88cc actions=CONTROLLER:65535
    cookie=0xac, table=0, send_flow_rem priority=30000,dl_src=ee:ee:ee:00:00:00/ff:ff:ff:00:00:00 actions=drop
    cookie=0xaa, table=0, send_flow_rem priority=20000,in_port="s1-eth1",dl_vlan=100 actions=set_field:4196->vlan_vid,output:"s1-eth2"
    cookie=0xaa, table=0, send_flow_rem priority=20000,in_port="s1-eth2",dl_vlan=100 actions=set_field:4196->vlan_vid,output:"s1-eth1"

Settings
--------

DL_SRC
~~~~~~

The matching field in **coloring** was configurable from **settings.py** but it is not neccessary. We are going to use the combination of **in_port** and **dl_src** when matching color packets and only **dl_src** to drop not recognize ones. **dl_src** will have a default value **ee:ee:ee:00:00:00/ff:ff:ff:00:00:00** that matches currently used colors (no more than 32 per switch). This way we can reduce the total number of flows.

Since we are going to have a set value for **dl_src**, we can make it configurable as **DL_MASK** to reduce its range for small networks or increase it.

- **DL_MASK = "ee:ee:ee:00:00:00/ff:ff:ff:00:00:00"**

Priority
~~~~~~~~

Adding **PRIORITY_MATCH** and **PRIORITY_DROP**, these are related to priority for matching flows and dropping flows respectively. As default values:

- **PRIORITY_MATCH = 50000**
- **PRIORITY_DROP = 40000**

**PRIORITY_DROP** should always be lower than **PRIORITY_MATCH** otherwise every color packet will be dropped. Also, it should be higher than **mef_eline** so it frees the succeeding flows.