[daemon]

# Full path of the working directory to which the process should change on
# daemon start. Since a filesystem cannot be unmounted if a process has its
# current working directory on that filesystem, this should either be left at
# default or set to a directory that is a sensible home directory for the
# daemon while it is running. Default is /var/lib/kytos.
workdir = {{ prefix }}/var/lib/kytos

# PID file to write. When the controller starts, it will save the his pid on
# this file.
pidfile = {{ prefix }}/var/run/kytos/kytosd.pid

# This controller can be started in two modes: 'daemon' mode or 'interactive'
# mode. On daemon mode, the process will detach from terminal when starts,
# running in background. When running on 'interactive' mode, you will receive a
# console right after the controller starts. Default is 'daemon' mode.
daemon = True

# Run the controller in debug mode or not. Default is False.
debug = False

# Logging config file. Please specify the full path of logging config file.
logging = {{ prefix }}/etc/kytos/logging.ini

# List of decorators to be applied to the Logger Class
logger_decorators = ["kytos.core.logger_decorators.queue_decorator"]

# The listen parameter tells kytos controller to accept incoming requests
# only in the specified address. Default is 0.0.0.0.
listen = 0.0.0.0

# The port parameter tells kytos controller to accept and to send
# openflow packets using TCP protocol. Default is 6653.
port = 6653

# Southbound protocol name of the TCP server. Don't use quotes in the string.
protocol_name =

# Switch connection timeout in seconds.
connection_timeout = 130

# The api_port parameter tells kytos controller to expose a port to accept
# incoming requests and to send a response from kytos API REST.
# Default is 8181.
api_port = 8181

# Whether to include a traceback response when a internal server error happens.
api_traceback_on_500 = True

# When a new entity (switch, interface or link) is created it is
# administratively disabled by default. Change here to modify this behavior.
# enable_entities_by_default = False

# Where should the controller look for network apps ?
# This directory has both core napps and user installed napps.
napps = {{ prefix }}/var/lib/kytos/napps

napps_repositories =
    [
        "https://napps.kytos.io/repo/"
    ]

# Pre installed napps. List of Napps to be pre-installed and enabled.
# Use double quotes in each NApp in the list, e.g., ["username/napp"].
napps_pre_installed = []

# VLAN pool settings
#
# The VLAN pool settings is a dictionary of datapath id, which contains
# a dictionary of of_port numbers with the respective vlan pool range
# for each port number. See the example below, which sets the vlan range
# [1, 5, 6, 7, 8, 9] on port 1 and vlan range [3] on port 4 of a switch
# that has a dpid '00:00:00:00:00:00:00:01'

vlan_pool = {}
# vlan_pool = {"00:00:00:00:00:00:00:01": {"1": [[1, 2], [5, 10]], "4": [[3, 4]]}}

# The jwt_secret parameter is responsible for signing JSON Web Tokens.
jwt_secret = {{ jwt_secret }}

# Time to expire authentication token in minutes
token_expiration_minutes = 180

# Maximum number of thread workers in a thread pool, if it's set as empty dict {} no thread pools will be used.
# The following pools are available by default to be used in the listen_to decorator:
# - sb: it's used automatically by kytos/of_core.* events, it's meant for southbound related messages
# - app: it's meant for general NApps event, it's default pool if no other one has been specified
# - db: it can be used by for higher priority db related tasks (need to be parametrized on decorator)
thread_pool_max_workers = {"sb": 256, "db": 256, "app": 512}

# Configuration for KytosEventBuffers
# Valid event buffers are "msg_in", "msg_out", "app", "conn", and "raw".
# Valid buffer types are:
#  - "default": Use KytosEventBuffer. Has one optional parameter "queue", which determines the type of queue to use, either "default" for a standard queue or "priority" for a priority queue.
# - "rate_limited": Use RateLimitedBuffer. This extends "default", and inherits the options from that. It has two options "strategy" and
"limit". "strategy" determines the "type" of rate limiting strategy to use and what "storage" to use for the rate limiting data. Valid "type"s of strategy are "moving_window", "fixed_window", and "elasitc_window". Only one "type" of storage is supported "memory". "limit" sets the limit on how fast messages may be processed after they have been received by the event buffer.

event_buffer_conf =
    {
        "msg_out": {
            "type": "rate_limited",
            "queue": "priority",
            "strategy": {
                "type": "moving_window",
                "storage": {
                    "type": "memory"
                }
            },
            "limit": "100/second",
            "identifier": "destination.id"
        },
        "msg_in": {
            "type": "default",
            "queue": "priority"
        }
    }

# NApps database. Supported values: mongodb (don't use quotes in the string)
database =

# APM backend. Supported values: es (elasticsearch, don't use quotes in the string)
apm =

# Define URLs that will require authentication
#
# This must be a list of part of URLs. For example, if "kytos/mef_eline"
# is in the list, then every URL containing "kytos/mef_eline" will match
# it and, therefore, require authentication.
# authenticate_urls = ["kytos/mef_eline", "kytos/pathfinder"]
